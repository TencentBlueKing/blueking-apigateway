/*
 * TencentBlueKing is pleased to support the open source community by making
 * 蓝鲸智云 - API 网关(BlueKing - APIGateway) available.
 * Copyright (C) 2017 THL A29 Limited, a Tencent company. All rights reserved.
 * Licensed under the MIT License (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 *     http://opensource.org/licenses/MIT
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * We undertake not to change the open source license (MIT license) applicable
 * to the current version of the project delivered to anyone in the future.
 */

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"mcp_proxy/pkg/entity/model"
)

func newCoreJWT(db *gorm.DB, opts ...gen.DOOption) coreJWT {
	_coreJWT := coreJWT{}

	_coreJWT.coreJWTDo.UseDB(db, opts...)
	_coreJWT.coreJWTDo.UseModel(&model.JWT{})

	tableName := _coreJWT.coreJWTDo.TableName()
	_coreJWT.ALL = field.NewAsterisk(tableName)
	_coreJWT.GatewayID = field.NewInt(tableName, "api_id")
	_coreJWT.PrivateKey = field.NewString(tableName, "private_key")
	_coreJWT.PublicKey = field.NewString(tableName, "public_key")
	_coreJWT.EncryptedPrivateKey = field.NewString(tableName, "encrypted_private_key")

	_coreJWT.fillFieldMap()

	return _coreJWT
}

type coreJWT struct {
	coreJWTDo coreJWTDo

	ALL                 field.Asterisk
	GatewayID           field.Int
	PrivateKey          field.String
	PublicKey           field.String
	EncryptedPrivateKey field.String

	fieldMap map[string]field.Expr
}

func (c coreJWT) Table(newTableName string) *coreJWT {
	c.coreJWTDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c coreJWT) As(alias string) *coreJWT {
	c.coreJWTDo.DO = *(c.coreJWTDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *coreJWT) updateTableName(table string) *coreJWT {
	c.ALL = field.NewAsterisk(table)
	c.GatewayID = field.NewInt(table, "api_id")
	c.PrivateKey = field.NewString(table, "private_key")
	c.PublicKey = field.NewString(table, "public_key")
	c.EncryptedPrivateKey = field.NewString(table, "encrypted_private_key")

	c.fillFieldMap()

	return c
}

func (c *coreJWT) WithContext(ctx context.Context) ICoreJWTDo { return c.coreJWTDo.WithContext(ctx) }

func (c coreJWT) TableName() string { return c.coreJWTDo.TableName() }

func (c coreJWT) Alias() string { return c.coreJWTDo.Alias() }

func (c coreJWT) Columns(cols ...field.Expr) gen.Columns { return c.coreJWTDo.Columns(cols...) }

func (c *coreJWT) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *coreJWT) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 4)
	c.fieldMap["api_id"] = c.GatewayID
	c.fieldMap["private_key"] = c.PrivateKey
	c.fieldMap["public_key"] = c.PublicKey
	c.fieldMap["encrypted_private_key"] = c.EncryptedPrivateKey
}

func (c coreJWT) clone(db *gorm.DB) coreJWT {
	c.coreJWTDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c coreJWT) replaceDB(db *gorm.DB) coreJWT {
	c.coreJWTDo.ReplaceDB(db)
	return c
}

type coreJWTDo struct{ gen.DO }

type ICoreJWTDo interface {
	gen.SubQuery
	Debug() ICoreJWTDo
	WithContext(ctx context.Context) ICoreJWTDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICoreJWTDo
	WriteDB() ICoreJWTDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICoreJWTDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICoreJWTDo
	Not(conds ...gen.Condition) ICoreJWTDo
	Or(conds ...gen.Condition) ICoreJWTDo
	Select(conds ...field.Expr) ICoreJWTDo
	Where(conds ...gen.Condition) ICoreJWTDo
	Order(conds ...field.Expr) ICoreJWTDo
	Distinct(cols ...field.Expr) ICoreJWTDo
	Omit(cols ...field.Expr) ICoreJWTDo
	Join(table schema.Tabler, on ...field.Expr) ICoreJWTDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICoreJWTDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICoreJWTDo
	Group(cols ...field.Expr) ICoreJWTDo
	Having(conds ...gen.Condition) ICoreJWTDo
	Limit(limit int) ICoreJWTDo
	Offset(offset int) ICoreJWTDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICoreJWTDo
	Unscoped() ICoreJWTDo
	Create(values ...*model.JWT) error
	CreateInBatches(values []*model.JWT, batchSize int) error
	Save(values ...*model.JWT) error
	First() (*model.JWT, error)
	Take() (*model.JWT, error)
	Last() (*model.JWT, error)
	Find() ([]*model.JWT, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.JWT, err error)
	FindInBatches(result *[]*model.JWT, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.JWT) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICoreJWTDo
	Assign(attrs ...field.AssignExpr) ICoreJWTDo
	Joins(fields ...field.RelationField) ICoreJWTDo
	Preload(fields ...field.RelationField) ICoreJWTDo
	FirstOrInit() (*model.JWT, error)
	FirstOrCreate() (*model.JWT, error)
	FindByPage(offset int, limit int) (result []*model.JWT, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICoreJWTDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c coreJWTDo) Debug() ICoreJWTDo {
	return c.withDO(c.DO.Debug())
}

func (c coreJWTDo) WithContext(ctx context.Context) ICoreJWTDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c coreJWTDo) ReadDB() ICoreJWTDo {
	return c.Clauses(dbresolver.Read)
}

func (c coreJWTDo) WriteDB() ICoreJWTDo {
	return c.Clauses(dbresolver.Write)
}

func (c coreJWTDo) Session(config *gorm.Session) ICoreJWTDo {
	return c.withDO(c.DO.Session(config))
}

func (c coreJWTDo) Clauses(conds ...clause.Expression) ICoreJWTDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c coreJWTDo) Returning(value interface{}, columns ...string) ICoreJWTDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c coreJWTDo) Not(conds ...gen.Condition) ICoreJWTDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c coreJWTDo) Or(conds ...gen.Condition) ICoreJWTDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c coreJWTDo) Select(conds ...field.Expr) ICoreJWTDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c coreJWTDo) Where(conds ...gen.Condition) ICoreJWTDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c coreJWTDo) Order(conds ...field.Expr) ICoreJWTDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c coreJWTDo) Distinct(cols ...field.Expr) ICoreJWTDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c coreJWTDo) Omit(cols ...field.Expr) ICoreJWTDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c coreJWTDo) Join(table schema.Tabler, on ...field.Expr) ICoreJWTDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c coreJWTDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICoreJWTDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c coreJWTDo) RightJoin(table schema.Tabler, on ...field.Expr) ICoreJWTDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c coreJWTDo) Group(cols ...field.Expr) ICoreJWTDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c coreJWTDo) Having(conds ...gen.Condition) ICoreJWTDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c coreJWTDo) Limit(limit int) ICoreJWTDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c coreJWTDo) Offset(offset int) ICoreJWTDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c coreJWTDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICoreJWTDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c coreJWTDo) Unscoped() ICoreJWTDo {
	return c.withDO(c.DO.Unscoped())
}

func (c coreJWTDo) Create(values ...*model.JWT) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c coreJWTDo) CreateInBatches(values []*model.JWT, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c coreJWTDo) Save(values ...*model.JWT) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c coreJWTDo) First() (*model.JWT, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.JWT), nil
	}
}

func (c coreJWTDo) Take() (*model.JWT, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.JWT), nil
	}
}

func (c coreJWTDo) Last() (*model.JWT, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.JWT), nil
	}
}

func (c coreJWTDo) Find() ([]*model.JWT, error) {
	result, err := c.DO.Find()
	return result.([]*model.JWT), err
}

func (c coreJWTDo) FindInBatch(
	batchSize int,
	fc func(tx gen.Dao, batch int) error,
) (results []*model.JWT, err error) {
	buf := make([]*model.JWT, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c coreJWTDo) FindInBatches(result *[]*model.JWT, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c coreJWTDo) Attrs(attrs ...field.AssignExpr) ICoreJWTDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c coreJWTDo) Assign(attrs ...field.AssignExpr) ICoreJWTDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c coreJWTDo) Joins(fields ...field.RelationField) ICoreJWTDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c coreJWTDo) Preload(fields ...field.RelationField) ICoreJWTDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c coreJWTDo) FirstOrInit() (*model.JWT, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.JWT), nil
	}
}

func (c coreJWTDo) FirstOrCreate() (*model.JWT, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.JWT), nil
	}
}

func (c coreJWTDo) FindByPage(offset int, limit int) (result []*model.JWT, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c coreJWTDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c coreJWTDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c coreJWTDo) Delete(models ...*model.JWT) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *coreJWTDo) withDO(do gen.Dao) *coreJWTDo {
	c.DO = *do.(*gen.DO)
	return c
}

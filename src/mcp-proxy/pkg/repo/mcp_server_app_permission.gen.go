/*
 * TencentBlueKing is pleased to support the open source community by making
 * 蓝鲸智云 - API 网关(BlueKing - APIGateway) available.
 * Copyright (C) 2017 THL A29 Limited, a Tencent company. All rights reserved.
 * Licensed under the MIT License (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 *     http://opensource.org/licenses/MIT
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * We undertake not to change the open source license (MIT license) applicable
 * to the current version of the project delivered to anyone in the future.
 */

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"mcp_proxy/pkg/entity/model"
)

func newMcpServerAppPermission(db *gorm.DB, opts ...gen.DOOption) mcpServerAppPermission {
	_mcpServerAppPermission := mcpServerAppPermission{}

	_mcpServerAppPermission.mcpServerAppPermissionDo.UseDB(db, opts...)
	_mcpServerAppPermission.mcpServerAppPermissionDo.UseModel(&model.MCPServerAppPermission{})

	tableName := _mcpServerAppPermission.mcpServerAppPermissionDo.TableName()
	_mcpServerAppPermission.ALL = field.NewAsterisk(tableName)
	_mcpServerAppPermission.Id = field.NewInt(tableName, "id")
	_mcpServerAppPermission.BkAppCode = field.NewString(tableName, "bk_app_code")
	_mcpServerAppPermission.Expires = field.NewTime(tableName, "expires")
	_mcpServerAppPermission.GrantType = field.NewString(tableName, "grant_type")
	_mcpServerAppPermission.McpServerId = field.NewInt(tableName, "mcp_server_id")

	_mcpServerAppPermission.fillFieldMap()

	return _mcpServerAppPermission
}

type mcpServerAppPermission struct {
	mcpServerAppPermissionDo mcpServerAppPermissionDo

	ALL         field.Asterisk
	Id          field.Int
	BkAppCode   field.String
	Expires     field.Time
	GrantType   field.String
	McpServerId field.Int

	fieldMap map[string]field.Expr
}

func (m mcpServerAppPermission) Table(newTableName string) *mcpServerAppPermission {
	m.mcpServerAppPermissionDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m mcpServerAppPermission) As(alias string) *mcpServerAppPermission {
	m.mcpServerAppPermissionDo.DO = *(m.mcpServerAppPermissionDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *mcpServerAppPermission) updateTableName(table string) *mcpServerAppPermission {
	m.ALL = field.NewAsterisk(table)
	m.Id = field.NewInt(table, "id")
	m.BkAppCode = field.NewString(table, "bk_app_code")
	m.Expires = field.NewTime(table, "expires")
	m.GrantType = field.NewString(table, "grant_type")
	m.McpServerId = field.NewInt(table, "mcp_server_id")

	m.fillFieldMap()

	return m
}

func (m *mcpServerAppPermission) WithContext(ctx context.Context) IMcpServerAppPermissionDo {
	return m.mcpServerAppPermissionDo.WithContext(ctx)
}

func (m mcpServerAppPermission) TableName() string { return m.mcpServerAppPermissionDo.TableName() }

func (m mcpServerAppPermission) Alias() string { return m.mcpServerAppPermissionDo.Alias() }

func (m mcpServerAppPermission) Columns(cols ...field.Expr) gen.Columns {
	return m.mcpServerAppPermissionDo.Columns(cols...)
}

func (m *mcpServerAppPermission) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *mcpServerAppPermission) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 5)
	m.fieldMap["id"] = m.Id
	m.fieldMap["bk_app_code"] = m.BkAppCode
	m.fieldMap["expires"] = m.Expires
	m.fieldMap["grant_type"] = m.GrantType
	m.fieldMap["mcp_server_id"] = m.McpServerId
}

func (m mcpServerAppPermission) clone(db *gorm.DB) mcpServerAppPermission {
	m.mcpServerAppPermissionDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m mcpServerAppPermission) replaceDB(db *gorm.DB) mcpServerAppPermission {
	m.mcpServerAppPermissionDo.ReplaceDB(db)
	return m
}

type mcpServerAppPermissionDo struct{ gen.DO }

type IMcpServerAppPermissionDo interface {
	gen.SubQuery
	Debug() IMcpServerAppPermissionDo
	WithContext(ctx context.Context) IMcpServerAppPermissionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMcpServerAppPermissionDo
	WriteDB() IMcpServerAppPermissionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMcpServerAppPermissionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMcpServerAppPermissionDo
	Not(conds ...gen.Condition) IMcpServerAppPermissionDo
	Or(conds ...gen.Condition) IMcpServerAppPermissionDo
	Select(conds ...field.Expr) IMcpServerAppPermissionDo
	Where(conds ...gen.Condition) IMcpServerAppPermissionDo
	Order(conds ...field.Expr) IMcpServerAppPermissionDo
	Distinct(cols ...field.Expr) IMcpServerAppPermissionDo
	Omit(cols ...field.Expr) IMcpServerAppPermissionDo
	Join(table schema.Tabler, on ...field.Expr) IMcpServerAppPermissionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMcpServerAppPermissionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMcpServerAppPermissionDo
	Group(cols ...field.Expr) IMcpServerAppPermissionDo
	Having(conds ...gen.Condition) IMcpServerAppPermissionDo
	Limit(limit int) IMcpServerAppPermissionDo
	Offset(offset int) IMcpServerAppPermissionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMcpServerAppPermissionDo
	Unscoped() IMcpServerAppPermissionDo
	Create(values ...*model.MCPServerAppPermission) error
	CreateInBatches(values []*model.MCPServerAppPermission, batchSize int) error
	Save(values ...*model.MCPServerAppPermission) error
	First() (*model.MCPServerAppPermission, error)
	Take() (*model.MCPServerAppPermission, error)
	Last() (*model.MCPServerAppPermission, error)
	Find() ([]*model.MCPServerAppPermission, error)
	FindInBatch(
		batchSize int,
		fc func(tx gen.Dao, batch int) error,
	) (results []*model.MCPServerAppPermission, err error)
	FindInBatches(result *[]*model.MCPServerAppPermission, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MCPServerAppPermission) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMcpServerAppPermissionDo
	Assign(attrs ...field.AssignExpr) IMcpServerAppPermissionDo
	Joins(fields ...field.RelationField) IMcpServerAppPermissionDo
	Preload(fields ...field.RelationField) IMcpServerAppPermissionDo
	FirstOrInit() (*model.MCPServerAppPermission, error)
	FirstOrCreate() (*model.MCPServerAppPermission, error)
	FindByPage(offset int, limit int) (result []*model.MCPServerAppPermission, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMcpServerAppPermissionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m mcpServerAppPermissionDo) Debug() IMcpServerAppPermissionDo {
	return m.withDO(m.DO.Debug())
}

func (m mcpServerAppPermissionDo) WithContext(ctx context.Context) IMcpServerAppPermissionDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m mcpServerAppPermissionDo) ReadDB() IMcpServerAppPermissionDo {
	return m.Clauses(dbresolver.Read)
}

func (m mcpServerAppPermissionDo) WriteDB() IMcpServerAppPermissionDo {
	return m.Clauses(dbresolver.Write)
}

func (m mcpServerAppPermissionDo) Session(config *gorm.Session) IMcpServerAppPermissionDo {
	return m.withDO(m.DO.Session(config))
}

func (m mcpServerAppPermissionDo) Clauses(conds ...clause.Expression) IMcpServerAppPermissionDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m mcpServerAppPermissionDo) Returning(value interface{}, columns ...string) IMcpServerAppPermissionDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m mcpServerAppPermissionDo) Not(conds ...gen.Condition) IMcpServerAppPermissionDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m mcpServerAppPermissionDo) Or(conds ...gen.Condition) IMcpServerAppPermissionDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m mcpServerAppPermissionDo) Select(conds ...field.Expr) IMcpServerAppPermissionDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m mcpServerAppPermissionDo) Where(conds ...gen.Condition) IMcpServerAppPermissionDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m mcpServerAppPermissionDo) Order(conds ...field.Expr) IMcpServerAppPermissionDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m mcpServerAppPermissionDo) Distinct(cols ...field.Expr) IMcpServerAppPermissionDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m mcpServerAppPermissionDo) Omit(cols ...field.Expr) IMcpServerAppPermissionDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m mcpServerAppPermissionDo) Join(table schema.Tabler, on ...field.Expr) IMcpServerAppPermissionDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m mcpServerAppPermissionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMcpServerAppPermissionDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m mcpServerAppPermissionDo) RightJoin(table schema.Tabler, on ...field.Expr) IMcpServerAppPermissionDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m mcpServerAppPermissionDo) Group(cols ...field.Expr) IMcpServerAppPermissionDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m mcpServerAppPermissionDo) Having(conds ...gen.Condition) IMcpServerAppPermissionDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m mcpServerAppPermissionDo) Limit(limit int) IMcpServerAppPermissionDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m mcpServerAppPermissionDo) Offset(offset int) IMcpServerAppPermissionDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m mcpServerAppPermissionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMcpServerAppPermissionDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m mcpServerAppPermissionDo) Unscoped() IMcpServerAppPermissionDo {
	return m.withDO(m.DO.Unscoped())
}

func (m mcpServerAppPermissionDo) Create(values ...*model.MCPServerAppPermission) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m mcpServerAppPermissionDo) CreateInBatches(values []*model.MCPServerAppPermission, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m mcpServerAppPermissionDo) Save(values ...*model.MCPServerAppPermission) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m mcpServerAppPermissionDo) First() (*model.MCPServerAppPermission, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MCPServerAppPermission), nil
	}
}

func (m mcpServerAppPermissionDo) Take() (*model.MCPServerAppPermission, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MCPServerAppPermission), nil
	}
}

func (m mcpServerAppPermissionDo) Last() (*model.MCPServerAppPermission, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MCPServerAppPermission), nil
	}
}

func (m mcpServerAppPermissionDo) Find() ([]*model.MCPServerAppPermission, error) {
	result, err := m.DO.Find()
	return result.([]*model.MCPServerAppPermission), err
}

func (m mcpServerAppPermissionDo) FindInBatch(
	batchSize int,
	fc func(tx gen.Dao, batch int) error,
) (results []*model.MCPServerAppPermission, err error) {
	buf := make([]*model.MCPServerAppPermission, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m mcpServerAppPermissionDo) FindInBatches(
	result *[]*model.MCPServerAppPermission,
	batchSize int,
	fc func(tx gen.Dao, batch int) error,
) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m mcpServerAppPermissionDo) Attrs(attrs ...field.AssignExpr) IMcpServerAppPermissionDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m mcpServerAppPermissionDo) Assign(attrs ...field.AssignExpr) IMcpServerAppPermissionDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m mcpServerAppPermissionDo) Joins(fields ...field.RelationField) IMcpServerAppPermissionDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m mcpServerAppPermissionDo) Preload(fields ...field.RelationField) IMcpServerAppPermissionDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m mcpServerAppPermissionDo) FirstOrInit() (*model.MCPServerAppPermission, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MCPServerAppPermission), nil
	}
}

func (m mcpServerAppPermissionDo) FirstOrCreate() (*model.MCPServerAppPermission, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MCPServerAppPermission), nil
	}
}

func (m mcpServerAppPermissionDo) FindByPage(
	offset int,
	limit int,
) (result []*model.MCPServerAppPermission, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m mcpServerAppPermissionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m mcpServerAppPermissionDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m mcpServerAppPermissionDo) Delete(models ...*model.MCPServerAppPermission) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *mcpServerAppPermissionDo) withDO(do gen.Dao) *mcpServerAppPermissionDo {
	m.DO = *do.(*gen.DO)
	return m
}

/*
 * TencentBlueKing is pleased to support the open source community by making
 * 蓝鲸智云 - API 网关(BlueKing - APIGateway) available.
 * Copyright (C) 2017 THL A29 Limited, a Tencent company. All rights reserved.
 * Licensed under the MIT License (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 *     http://opensource.org/licenses/MIT
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * We undertake not to change the open source license (MIT license) applicable
 * to the current version of the project delivered to anyone in the future.
 */

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"mcp_proxy/pkg/entity/model"
)

func newOpenapiGatewayResourceVersionSpec(db *gorm.DB, opts ...gen.DOOption) openapiGatewayResourceVersionSpec {
	_openapiGatewayResourceVersionSpec := openapiGatewayResourceVersionSpec{}

	_openapiGatewayResourceVersionSpec.openapiGatewayResourceVersionSpecDo.UseDB(db, opts...)
	_openapiGatewayResourceVersionSpec.openapiGatewayResourceVersionSpecDo.UseModel(
		&model.OpenapiGatewayResourceVersionSpec{},
	)

	tableName := _openapiGatewayResourceVersionSpec.openapiGatewayResourceVersionSpecDo.TableName()
	_openapiGatewayResourceVersionSpec.ALL = field.NewAsterisk(tableName)
	_openapiGatewayResourceVersionSpec.ID = field.NewInt(tableName, "id")
	_openapiGatewayResourceVersionSpec.Schema = field.NewString(tableName, "schema")
	_openapiGatewayResourceVersionSpec.GatewayID = field.NewInt(tableName, "api_id")
	_openapiGatewayResourceVersionSpec.ResourceVersionID = field.NewInt(tableName, "resource_version_id")

	_openapiGatewayResourceVersionSpec.fillFieldMap()

	return _openapiGatewayResourceVersionSpec
}

type openapiGatewayResourceVersionSpec struct {
	openapiGatewayResourceVersionSpecDo openapiGatewayResourceVersionSpecDo

	ALL               field.Asterisk
	ID                field.Int
	Schema            field.String
	GatewayID         field.Int
	ResourceVersionID field.Int

	fieldMap map[string]field.Expr
}

func (o openapiGatewayResourceVersionSpec) Table(newTableName string) *openapiGatewayResourceVersionSpec {
	o.openapiGatewayResourceVersionSpecDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o openapiGatewayResourceVersionSpec) As(alias string) *openapiGatewayResourceVersionSpec {
	o.openapiGatewayResourceVersionSpecDo.DO = *(o.openapiGatewayResourceVersionSpecDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *openapiGatewayResourceVersionSpec) updateTableName(table string) *openapiGatewayResourceVersionSpec {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt(table, "id")
	o.Schema = field.NewString(table, "schema")
	o.GatewayID = field.NewInt(table, "api_id")
	o.ResourceVersionID = field.NewInt(table, "resource_version_id")

	o.fillFieldMap()

	return o
}

func (o *openapiGatewayResourceVersionSpec) WithContext(ctx context.Context) IOpenapiGatewayResourceVersionSpecDo {
	return o.openapiGatewayResourceVersionSpecDo.WithContext(ctx)
}

func (o openapiGatewayResourceVersionSpec) TableName() string {
	return o.openapiGatewayResourceVersionSpecDo.TableName()
}

func (o openapiGatewayResourceVersionSpec) Alias() string {
	return o.openapiGatewayResourceVersionSpecDo.Alias()
}

func (o openapiGatewayResourceVersionSpec) Columns(cols ...field.Expr) gen.Columns {
	return o.openapiGatewayResourceVersionSpecDo.Columns(cols...)
}

func (o *openapiGatewayResourceVersionSpec) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *openapiGatewayResourceVersionSpec) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 4)
	o.fieldMap["id"] = o.ID
	o.fieldMap["schema"] = o.Schema
	o.fieldMap["api_id"] = o.GatewayID
	o.fieldMap["resource_version_id"] = o.ResourceVersionID
}

func (o openapiGatewayResourceVersionSpec) clone(db *gorm.DB) openapiGatewayResourceVersionSpec {
	o.openapiGatewayResourceVersionSpecDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o openapiGatewayResourceVersionSpec) replaceDB(db *gorm.DB) openapiGatewayResourceVersionSpec {
	o.openapiGatewayResourceVersionSpecDo.ReplaceDB(db)
	return o
}

type openapiGatewayResourceVersionSpecDo struct{ gen.DO }

type IOpenapiGatewayResourceVersionSpecDo interface {
	gen.SubQuery
	Debug() IOpenapiGatewayResourceVersionSpecDo
	WithContext(ctx context.Context) IOpenapiGatewayResourceVersionSpecDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOpenapiGatewayResourceVersionSpecDo
	WriteDB() IOpenapiGatewayResourceVersionSpecDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOpenapiGatewayResourceVersionSpecDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOpenapiGatewayResourceVersionSpecDo
	Not(conds ...gen.Condition) IOpenapiGatewayResourceVersionSpecDo
	Or(conds ...gen.Condition) IOpenapiGatewayResourceVersionSpecDo
	Select(conds ...field.Expr) IOpenapiGatewayResourceVersionSpecDo
	Where(conds ...gen.Condition) IOpenapiGatewayResourceVersionSpecDo
	Order(conds ...field.Expr) IOpenapiGatewayResourceVersionSpecDo
	Distinct(cols ...field.Expr) IOpenapiGatewayResourceVersionSpecDo
	Omit(cols ...field.Expr) IOpenapiGatewayResourceVersionSpecDo
	Join(table schema.Tabler, on ...field.Expr) IOpenapiGatewayResourceVersionSpecDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOpenapiGatewayResourceVersionSpecDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOpenapiGatewayResourceVersionSpecDo
	Group(cols ...field.Expr) IOpenapiGatewayResourceVersionSpecDo
	Having(conds ...gen.Condition) IOpenapiGatewayResourceVersionSpecDo
	Limit(limit int) IOpenapiGatewayResourceVersionSpecDo
	Offset(offset int) IOpenapiGatewayResourceVersionSpecDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOpenapiGatewayResourceVersionSpecDo
	Unscoped() IOpenapiGatewayResourceVersionSpecDo
	Create(values ...*model.OpenapiGatewayResourceVersionSpec) error
	CreateInBatches(values []*model.OpenapiGatewayResourceVersionSpec, batchSize int) error
	Save(values ...*model.OpenapiGatewayResourceVersionSpec) error
	First() (*model.OpenapiGatewayResourceVersionSpec, error)
	Take() (*model.OpenapiGatewayResourceVersionSpec, error)
	Last() (*model.OpenapiGatewayResourceVersionSpec, error)
	Find() ([]*model.OpenapiGatewayResourceVersionSpec, error)
	FindInBatch(
		batchSize int,
		fc func(tx gen.Dao, batch int) error,
	) (results []*model.OpenapiGatewayResourceVersionSpec, err error)
	FindInBatches(
		result *[]*model.OpenapiGatewayResourceVersionSpec,
		batchSize int,
		fc func(tx gen.Dao, batch int) error,
	) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OpenapiGatewayResourceVersionSpec) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOpenapiGatewayResourceVersionSpecDo
	Assign(attrs ...field.AssignExpr) IOpenapiGatewayResourceVersionSpecDo
	Joins(fields ...field.RelationField) IOpenapiGatewayResourceVersionSpecDo
	Preload(fields ...field.RelationField) IOpenapiGatewayResourceVersionSpecDo
	FirstOrInit() (*model.OpenapiGatewayResourceVersionSpec, error)
	FirstOrCreate() (*model.OpenapiGatewayResourceVersionSpec, error)
	FindByPage(offset int, limit int) (result []*model.OpenapiGatewayResourceVersionSpec, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOpenapiGatewayResourceVersionSpecDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o openapiGatewayResourceVersionSpecDo) Debug() IOpenapiGatewayResourceVersionSpecDo {
	return o.withDO(o.DO.Debug())
}

func (o openapiGatewayResourceVersionSpecDo) WithContext(ctx context.Context) IOpenapiGatewayResourceVersionSpecDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o openapiGatewayResourceVersionSpecDo) ReadDB() IOpenapiGatewayResourceVersionSpecDo {
	return o.Clauses(dbresolver.Read)
}

func (o openapiGatewayResourceVersionSpecDo) WriteDB() IOpenapiGatewayResourceVersionSpecDo {
	return o.Clauses(dbresolver.Write)
}

func (o openapiGatewayResourceVersionSpecDo) Session(config *gorm.Session) IOpenapiGatewayResourceVersionSpecDo {
	return o.withDO(o.DO.Session(config))
}

func (o openapiGatewayResourceVersionSpecDo) Clauses(conds ...clause.Expression) IOpenapiGatewayResourceVersionSpecDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o openapiGatewayResourceVersionSpecDo) Returning(
	value interface{},
	columns ...string,
) IOpenapiGatewayResourceVersionSpecDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o openapiGatewayResourceVersionSpecDo) Not(conds ...gen.Condition) IOpenapiGatewayResourceVersionSpecDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o openapiGatewayResourceVersionSpecDo) Or(conds ...gen.Condition) IOpenapiGatewayResourceVersionSpecDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o openapiGatewayResourceVersionSpecDo) Select(conds ...field.Expr) IOpenapiGatewayResourceVersionSpecDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o openapiGatewayResourceVersionSpecDo) Where(conds ...gen.Condition) IOpenapiGatewayResourceVersionSpecDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o openapiGatewayResourceVersionSpecDo) Order(conds ...field.Expr) IOpenapiGatewayResourceVersionSpecDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o openapiGatewayResourceVersionSpecDo) Distinct(cols ...field.Expr) IOpenapiGatewayResourceVersionSpecDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o openapiGatewayResourceVersionSpecDo) Omit(cols ...field.Expr) IOpenapiGatewayResourceVersionSpecDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o openapiGatewayResourceVersionSpecDo) Join(
	table schema.Tabler,
	on ...field.Expr,
) IOpenapiGatewayResourceVersionSpecDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o openapiGatewayResourceVersionSpecDo) LeftJoin(
	table schema.Tabler,
	on ...field.Expr,
) IOpenapiGatewayResourceVersionSpecDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o openapiGatewayResourceVersionSpecDo) RightJoin(
	table schema.Tabler,
	on ...field.Expr,
) IOpenapiGatewayResourceVersionSpecDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o openapiGatewayResourceVersionSpecDo) Group(cols ...field.Expr) IOpenapiGatewayResourceVersionSpecDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o openapiGatewayResourceVersionSpecDo) Having(conds ...gen.Condition) IOpenapiGatewayResourceVersionSpecDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o openapiGatewayResourceVersionSpecDo) Limit(limit int) IOpenapiGatewayResourceVersionSpecDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o openapiGatewayResourceVersionSpecDo) Offset(offset int) IOpenapiGatewayResourceVersionSpecDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o openapiGatewayResourceVersionSpecDo) Scopes(
	funcs ...func(gen.Dao) gen.Dao,
) IOpenapiGatewayResourceVersionSpecDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o openapiGatewayResourceVersionSpecDo) Unscoped() IOpenapiGatewayResourceVersionSpecDo {
	return o.withDO(o.DO.Unscoped())
}

func (o openapiGatewayResourceVersionSpecDo) Create(values ...*model.OpenapiGatewayResourceVersionSpec) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o openapiGatewayResourceVersionSpecDo) CreateInBatches(
	values []*model.OpenapiGatewayResourceVersionSpec,
	batchSize int,
) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o openapiGatewayResourceVersionSpecDo) Save(values ...*model.OpenapiGatewayResourceVersionSpec) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o openapiGatewayResourceVersionSpecDo) First() (*model.OpenapiGatewayResourceVersionSpec, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OpenapiGatewayResourceVersionSpec), nil
	}
}

func (o openapiGatewayResourceVersionSpecDo) Take() (*model.OpenapiGatewayResourceVersionSpec, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OpenapiGatewayResourceVersionSpec), nil
	}
}

func (o openapiGatewayResourceVersionSpecDo) Last() (*model.OpenapiGatewayResourceVersionSpec, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OpenapiGatewayResourceVersionSpec), nil
	}
}

func (o openapiGatewayResourceVersionSpecDo) Find() ([]*model.OpenapiGatewayResourceVersionSpec, error) {
	result, err := o.DO.Find()
	return result.([]*model.OpenapiGatewayResourceVersionSpec), err
}

func (o openapiGatewayResourceVersionSpecDo) FindInBatch(
	batchSize int,
	fc func(tx gen.Dao, batch int) error,
) (results []*model.OpenapiGatewayResourceVersionSpec, err error) {
	buf := make([]*model.OpenapiGatewayResourceVersionSpec, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o openapiGatewayResourceVersionSpecDo) FindInBatches(
	result *[]*model.OpenapiGatewayResourceVersionSpec,
	batchSize int,
	fc func(tx gen.Dao, batch int) error,
) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o openapiGatewayResourceVersionSpecDo) Attrs(attrs ...field.AssignExpr) IOpenapiGatewayResourceVersionSpecDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o openapiGatewayResourceVersionSpecDo) Assign(attrs ...field.AssignExpr) IOpenapiGatewayResourceVersionSpecDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o openapiGatewayResourceVersionSpecDo) Joins(fields ...field.RelationField) IOpenapiGatewayResourceVersionSpecDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o openapiGatewayResourceVersionSpecDo) Preload(
	fields ...field.RelationField,
) IOpenapiGatewayResourceVersionSpecDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o openapiGatewayResourceVersionSpecDo) FirstOrInit() (*model.OpenapiGatewayResourceVersionSpec, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OpenapiGatewayResourceVersionSpec), nil
	}
}

func (o openapiGatewayResourceVersionSpecDo) FirstOrCreate() (*model.OpenapiGatewayResourceVersionSpec, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OpenapiGatewayResourceVersionSpec), nil
	}
}

func (o openapiGatewayResourceVersionSpecDo) FindByPage(
	offset int,
	limit int,
) (result []*model.OpenapiGatewayResourceVersionSpec, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o openapiGatewayResourceVersionSpecDo) ScanByPage(
	result interface{},
	offset int,
	limit int,
) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o openapiGatewayResourceVersionSpecDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o openapiGatewayResourceVersionSpecDo) Delete(
	models ...*model.OpenapiGatewayResourceVersionSpec,
) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *openapiGatewayResourceVersionSpecDo) withDO(do gen.Dao) *openapiGatewayResourceVersionSpecDo {
	o.DO = *do.(*gen.DO)
	return o
}

/*
 * TencentBlueKing is pleased to support the open source community by making
 * 蓝鲸智云 - API 网关(BlueKing - APIGateway) available.
 * Copyright (C) 2017 THL A29 Limited, a Tencent company. All rights reserved.
 * Licensed under the MIT License (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 *     http://opensource.org/licenses/MIT
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * We undertake not to change the open source license (MIT license) applicable
 * to the current version of the project delivered to anyone in the future.
 */

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"mcp_proxy/pkg/entity/model"
)

func newCoreRelease(db *gorm.DB, opts ...gen.DOOption) coreRelease {
	_coreRelease := coreRelease{}

	_coreRelease.coreReleaseDo.UseDB(db, opts...)
	_coreRelease.coreReleaseDo.UseModel(&model.Release{})

	tableName := _coreRelease.coreReleaseDo.TableName()
	_coreRelease.ALL = field.NewAsterisk(tableName)
	_coreRelease.ID = field.NewInt(tableName, "id")
	_coreRelease.GatewayID = field.NewInt(tableName, "api_id")
	_coreRelease.ResourceVersionID = field.NewInt(tableName, "resource_version_id")
	_coreRelease.StageID = field.NewInt(tableName, "stage_id")

	_coreRelease.fillFieldMap()

	return _coreRelease
}

type coreRelease struct {
	coreReleaseDo coreReleaseDo

	ALL               field.Asterisk
	ID                field.Int
	GatewayID         field.Int
	ResourceVersionID field.Int
	StageID           field.Int

	fieldMap map[string]field.Expr
}

func (c coreRelease) Table(newTableName string) *coreRelease {
	c.coreReleaseDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c coreRelease) As(alias string) *coreRelease {
	c.coreReleaseDo.DO = *(c.coreReleaseDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *coreRelease) updateTableName(table string) *coreRelease {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt(table, "id")
	c.GatewayID = field.NewInt(table, "api_id")
	c.ResourceVersionID = field.NewInt(table, "resource_version_id")
	c.StageID = field.NewInt(table, "stage_id")

	c.fillFieldMap()

	return c
}

func (c *coreRelease) WithContext(ctx context.Context) ICoreReleaseDo {
	return c.coreReleaseDo.WithContext(ctx)
}

func (c coreRelease) TableName() string { return c.coreReleaseDo.TableName() }

func (c coreRelease) Alias() string { return c.coreReleaseDo.Alias() }

func (c coreRelease) Columns(cols ...field.Expr) gen.Columns { return c.coreReleaseDo.Columns(cols...) }

func (c *coreRelease) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *coreRelease) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 4)
	c.fieldMap["id"] = c.ID
	c.fieldMap["api_id"] = c.GatewayID
	c.fieldMap["resource_version_id"] = c.ResourceVersionID
	c.fieldMap["stage_id"] = c.StageID
}

func (c coreRelease) clone(db *gorm.DB) coreRelease {
	c.coreReleaseDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c coreRelease) replaceDB(db *gorm.DB) coreRelease {
	c.coreReleaseDo.ReplaceDB(db)
	return c
}

type coreReleaseDo struct{ gen.DO }

type ICoreReleaseDo interface {
	gen.SubQuery
	Debug() ICoreReleaseDo
	WithContext(ctx context.Context) ICoreReleaseDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICoreReleaseDo
	WriteDB() ICoreReleaseDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICoreReleaseDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICoreReleaseDo
	Not(conds ...gen.Condition) ICoreReleaseDo
	Or(conds ...gen.Condition) ICoreReleaseDo
	Select(conds ...field.Expr) ICoreReleaseDo
	Where(conds ...gen.Condition) ICoreReleaseDo
	Order(conds ...field.Expr) ICoreReleaseDo
	Distinct(cols ...field.Expr) ICoreReleaseDo
	Omit(cols ...field.Expr) ICoreReleaseDo
	Join(table schema.Tabler, on ...field.Expr) ICoreReleaseDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICoreReleaseDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICoreReleaseDo
	Group(cols ...field.Expr) ICoreReleaseDo
	Having(conds ...gen.Condition) ICoreReleaseDo
	Limit(limit int) ICoreReleaseDo
	Offset(offset int) ICoreReleaseDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICoreReleaseDo
	Unscoped() ICoreReleaseDo
	Create(values ...*model.Release) error
	CreateInBatches(values []*model.Release, batchSize int) error
	Save(values ...*model.Release) error
	First() (*model.Release, error)
	Take() (*model.Release, error)
	Last() (*model.Release, error)
	Find() ([]*model.Release, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Release, err error)
	FindInBatches(result *[]*model.Release, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Release) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICoreReleaseDo
	Assign(attrs ...field.AssignExpr) ICoreReleaseDo
	Joins(fields ...field.RelationField) ICoreReleaseDo
	Preload(fields ...field.RelationField) ICoreReleaseDo
	FirstOrInit() (*model.Release, error)
	FirstOrCreate() (*model.Release, error)
	FindByPage(offset int, limit int) (result []*model.Release, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICoreReleaseDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c coreReleaseDo) Debug() ICoreReleaseDo {
	return c.withDO(c.DO.Debug())
}

func (c coreReleaseDo) WithContext(ctx context.Context) ICoreReleaseDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c coreReleaseDo) ReadDB() ICoreReleaseDo {
	return c.Clauses(dbresolver.Read)
}

func (c coreReleaseDo) WriteDB() ICoreReleaseDo {
	return c.Clauses(dbresolver.Write)
}

func (c coreReleaseDo) Session(config *gorm.Session) ICoreReleaseDo {
	return c.withDO(c.DO.Session(config))
}

func (c coreReleaseDo) Clauses(conds ...clause.Expression) ICoreReleaseDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c coreReleaseDo) Returning(value interface{}, columns ...string) ICoreReleaseDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c coreReleaseDo) Not(conds ...gen.Condition) ICoreReleaseDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c coreReleaseDo) Or(conds ...gen.Condition) ICoreReleaseDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c coreReleaseDo) Select(conds ...field.Expr) ICoreReleaseDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c coreReleaseDo) Where(conds ...gen.Condition) ICoreReleaseDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c coreReleaseDo) Order(conds ...field.Expr) ICoreReleaseDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c coreReleaseDo) Distinct(cols ...field.Expr) ICoreReleaseDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c coreReleaseDo) Omit(cols ...field.Expr) ICoreReleaseDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c coreReleaseDo) Join(table schema.Tabler, on ...field.Expr) ICoreReleaseDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c coreReleaseDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICoreReleaseDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c coreReleaseDo) RightJoin(table schema.Tabler, on ...field.Expr) ICoreReleaseDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c coreReleaseDo) Group(cols ...field.Expr) ICoreReleaseDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c coreReleaseDo) Having(conds ...gen.Condition) ICoreReleaseDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c coreReleaseDo) Limit(limit int) ICoreReleaseDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c coreReleaseDo) Offset(offset int) ICoreReleaseDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c coreReleaseDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICoreReleaseDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c coreReleaseDo) Unscoped() ICoreReleaseDo {
	return c.withDO(c.DO.Unscoped())
}

func (c coreReleaseDo) Create(values ...*model.Release) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c coreReleaseDo) CreateInBatches(values []*model.Release, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c coreReleaseDo) Save(values ...*model.Release) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c coreReleaseDo) First() (*model.Release, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Release), nil
	}
}

func (c coreReleaseDo) Take() (*model.Release, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Release), nil
	}
}

func (c coreReleaseDo) Last() (*model.Release, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Release), nil
	}
}

func (c coreReleaseDo) Find() ([]*model.Release, error) {
	result, err := c.DO.Find()
	return result.([]*model.Release), err
}

func (c coreReleaseDo) FindInBatch(
	batchSize int,
	fc func(tx gen.Dao, batch int) error,
) (results []*model.Release, err error) {
	buf := make([]*model.Release, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c coreReleaseDo) FindInBatches(
	result *[]*model.Release,
	batchSize int,
	fc func(tx gen.Dao, batch int) error,
) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c coreReleaseDo) Attrs(attrs ...field.AssignExpr) ICoreReleaseDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c coreReleaseDo) Assign(attrs ...field.AssignExpr) ICoreReleaseDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c coreReleaseDo) Joins(fields ...field.RelationField) ICoreReleaseDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c coreReleaseDo) Preload(fields ...field.RelationField) ICoreReleaseDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c coreReleaseDo) FirstOrInit() (*model.Release, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Release), nil
	}
}

func (c coreReleaseDo) FirstOrCreate() (*model.Release, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Release), nil
	}
}

func (c coreReleaseDo) FindByPage(offset int, limit int) (result []*model.Release, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c coreReleaseDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c coreReleaseDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c coreReleaseDo) Delete(models ...*model.Release) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *coreReleaseDo) withDO(do gen.Dao) *coreReleaseDo {
	c.DO = *do.(*gen.DO)
	return c
}

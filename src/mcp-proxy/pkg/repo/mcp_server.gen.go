/*
 * TencentBlueKing is pleased to support the open source community by making
 * 蓝鲸智云 - API 网关(BlueKing - APIGateway) available.
 * Copyright (C) 2017 THL A29 Limited, a Tencent company. All rights reserved.
 * Licensed under the MIT License (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 *     http://opensource.org/licenses/MIT
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * We undertake not to change the open source license (MIT license) applicable
 * to the current version of the project delivered to anyone in the future.
 */

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"mcp_proxy/pkg/entity/model"
)

func newMcpServer(db *gorm.DB, opts ...gen.DOOption) mcpServer {
	_mcpServer := mcpServer{}

	_mcpServer.mcpServerDo.UseDB(db, opts...)
	_mcpServer.mcpServerDo.UseModel(&model.MCPServer{})

	tableName := _mcpServer.mcpServerDo.TableName()
	_mcpServer.ALL = field.NewAsterisk(tableName)
	_mcpServer.ID = field.NewInt(tableName, "id")
	_mcpServer.Name = field.NewString(tableName, "name")
	_mcpServer.Description = field.NewString(tableName, "description")
	_mcpServer.IsPublic = field.NewBool(tableName, "is_public")
	_mcpServer.Labels = field.NewField(tableName, "labels")
	_mcpServer.ResourceNames = field.NewField(tableName, "resource_names")
	_mcpServer.Status = field.NewInt(tableName, "status")
	_mcpServer.GatewayID = field.NewInt(tableName, "gateway_id")
	_mcpServer.StageID = field.NewInt(tableName, "stage_id")

	_mcpServer.fillFieldMap()

	return _mcpServer
}

type mcpServer struct {
	mcpServerDo mcpServerDo

	ALL           field.Asterisk
	ID            field.Int
	Name          field.String
	Description   field.String
	IsPublic      field.Bool
	Labels        field.Field
	ResourceNames field.Field
	Status        field.Int
	GatewayID     field.Int
	StageID       field.Int

	fieldMap map[string]field.Expr
}

func (m mcpServer) Table(newTableName string) *mcpServer {
	m.mcpServerDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m mcpServer) As(alias string) *mcpServer {
	m.mcpServerDo.DO = *(m.mcpServerDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *mcpServer) updateTableName(table string) *mcpServer {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt(table, "id")
	m.Name = field.NewString(table, "name")
	m.Description = field.NewString(table, "description")
	m.IsPublic = field.NewBool(table, "is_public")
	m.Labels = field.NewField(table, "labels")
	m.ResourceNames = field.NewField(table, "resource_names")
	m.Status = field.NewInt(table, "status")
	m.GatewayID = field.NewInt(table, "gateway_id")
	m.StageID = field.NewInt(table, "stage_id")

	m.fillFieldMap()

	return m
}

func (m *mcpServer) WithContext(ctx context.Context) IMcpServerDo {
	return m.mcpServerDo.WithContext(ctx)
}

func (m mcpServer) TableName() string { return m.mcpServerDo.TableName() }

func (m mcpServer) Alias() string { return m.mcpServerDo.Alias() }

func (m mcpServer) Columns(cols ...field.Expr) gen.Columns { return m.mcpServerDo.Columns(cols...) }

func (m *mcpServer) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *mcpServer) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 9)
	m.fieldMap["id"] = m.ID
	m.fieldMap["name"] = m.Name
	m.fieldMap["description"] = m.Description
	m.fieldMap["is_public"] = m.IsPublic
	m.fieldMap["labels"] = m.Labels
	m.fieldMap["resource_names"] = m.ResourceNames
	m.fieldMap["status"] = m.Status
	m.fieldMap["gateway_id"] = m.GatewayID
	m.fieldMap["stage_id"] = m.StageID
}

func (m mcpServer) clone(db *gorm.DB) mcpServer {
	m.mcpServerDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m mcpServer) replaceDB(db *gorm.DB) mcpServer {
	m.mcpServerDo.ReplaceDB(db)
	return m
}

type mcpServerDo struct{ gen.DO }

type IMcpServerDo interface {
	gen.SubQuery
	Debug() IMcpServerDo
	WithContext(ctx context.Context) IMcpServerDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMcpServerDo
	WriteDB() IMcpServerDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMcpServerDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMcpServerDo
	Not(conds ...gen.Condition) IMcpServerDo
	Or(conds ...gen.Condition) IMcpServerDo
	Select(conds ...field.Expr) IMcpServerDo
	Where(conds ...gen.Condition) IMcpServerDo
	Order(conds ...field.Expr) IMcpServerDo
	Distinct(cols ...field.Expr) IMcpServerDo
	Omit(cols ...field.Expr) IMcpServerDo
	Join(table schema.Tabler, on ...field.Expr) IMcpServerDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMcpServerDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMcpServerDo
	Group(cols ...field.Expr) IMcpServerDo
	Having(conds ...gen.Condition) IMcpServerDo
	Limit(limit int) IMcpServerDo
	Offset(offset int) IMcpServerDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMcpServerDo
	Unscoped() IMcpServerDo
	Create(values ...*model.MCPServer) error
	CreateInBatches(values []*model.MCPServer, batchSize int) error
	Save(values ...*model.MCPServer) error
	First() (*model.MCPServer, error)
	Take() (*model.MCPServer, error)
	Last() (*model.MCPServer, error)
	Find() ([]*model.MCPServer, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MCPServer, err error)
	FindInBatches(result *[]*model.MCPServer, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MCPServer) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMcpServerDo
	Assign(attrs ...field.AssignExpr) IMcpServerDo
	Joins(fields ...field.RelationField) IMcpServerDo
	Preload(fields ...field.RelationField) IMcpServerDo
	FirstOrInit() (*model.MCPServer, error)
	FirstOrCreate() (*model.MCPServer, error)
	FindByPage(offset int, limit int) (result []*model.MCPServer, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMcpServerDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m mcpServerDo) Debug() IMcpServerDo {
	return m.withDO(m.DO.Debug())
}

func (m mcpServerDo) WithContext(ctx context.Context) IMcpServerDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m mcpServerDo) ReadDB() IMcpServerDo {
	return m.Clauses(dbresolver.Read)
}

func (m mcpServerDo) WriteDB() IMcpServerDo {
	return m.Clauses(dbresolver.Write)
}

func (m mcpServerDo) Session(config *gorm.Session) IMcpServerDo {
	return m.withDO(m.DO.Session(config))
}

func (m mcpServerDo) Clauses(conds ...clause.Expression) IMcpServerDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m mcpServerDo) Returning(value interface{}, columns ...string) IMcpServerDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m mcpServerDo) Not(conds ...gen.Condition) IMcpServerDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m mcpServerDo) Or(conds ...gen.Condition) IMcpServerDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m mcpServerDo) Select(conds ...field.Expr) IMcpServerDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m mcpServerDo) Where(conds ...gen.Condition) IMcpServerDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m mcpServerDo) Order(conds ...field.Expr) IMcpServerDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m mcpServerDo) Distinct(cols ...field.Expr) IMcpServerDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m mcpServerDo) Omit(cols ...field.Expr) IMcpServerDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m mcpServerDo) Join(table schema.Tabler, on ...field.Expr) IMcpServerDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m mcpServerDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMcpServerDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m mcpServerDo) RightJoin(table schema.Tabler, on ...field.Expr) IMcpServerDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m mcpServerDo) Group(cols ...field.Expr) IMcpServerDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m mcpServerDo) Having(conds ...gen.Condition) IMcpServerDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m mcpServerDo) Limit(limit int) IMcpServerDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m mcpServerDo) Offset(offset int) IMcpServerDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m mcpServerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMcpServerDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m mcpServerDo) Unscoped() IMcpServerDo {
	return m.withDO(m.DO.Unscoped())
}

func (m mcpServerDo) Create(values ...*model.MCPServer) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m mcpServerDo) CreateInBatches(values []*model.MCPServer, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m mcpServerDo) Save(values ...*model.MCPServer) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m mcpServerDo) First() (*model.MCPServer, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MCPServer), nil
	}
}

func (m mcpServerDo) Take() (*model.MCPServer, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MCPServer), nil
	}
}

func (m mcpServerDo) Last() (*model.MCPServer, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MCPServer), nil
	}
}

func (m mcpServerDo) Find() ([]*model.MCPServer, error) {
	result, err := m.DO.Find()
	return result.([]*model.MCPServer), err
}

func (m mcpServerDo) FindInBatch(
	batchSize int,
	fc func(tx gen.Dao, batch int) error,
) (results []*model.MCPServer, err error) {
	buf := make([]*model.MCPServer, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m mcpServerDo) FindInBatches(
	result *[]*model.MCPServer,
	batchSize int,
	fc func(tx gen.Dao, batch int) error,
) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m mcpServerDo) Attrs(attrs ...field.AssignExpr) IMcpServerDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m mcpServerDo) Assign(attrs ...field.AssignExpr) IMcpServerDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m mcpServerDo) Joins(fields ...field.RelationField) IMcpServerDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m mcpServerDo) Preload(fields ...field.RelationField) IMcpServerDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m mcpServerDo) FirstOrInit() (*model.MCPServer, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MCPServer), nil
	}
}

func (m mcpServerDo) FirstOrCreate() (*model.MCPServer, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MCPServer), nil
	}
}

func (m mcpServerDo) FindByPage(offset int, limit int) (result []*model.MCPServer, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m mcpServerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m mcpServerDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m mcpServerDo) Delete(models ...*model.MCPServer) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *mcpServerDo) withDO(do gen.Dao) *mcpServerDo {
	m.DO = *do.(*gen.DO)
	return m
}

/*
 * TencentBlueKing is pleased to support the open source community by making
 * 蓝鲸智云 - API 网关(BlueKing - APIGateway) available.
 * Copyright (C) 2017 THL A29 Limited, a Tencent company. All rights reserved.
 * Licensed under the MIT License (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 *     http://opensource.org/licenses/MIT
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * We undertake not to change the open source license (MIT license) applicable
 * to the current version of the project delivered to anyone in the future.
 */

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                                 = new(Query)
	CoreJWT                           *coreJWT
	CoreRelease                       *coreRelease
	CoreReleasedResource              *coreReleasedResource
	Gateway                           *gateway
	McpServer                         *mcpServer
	McpServerAppPermission            *mcpServerAppPermission
	OpenapiGatewayResourceVersionSpec *openapiGatewayResourceVersionSpec
	Stage                             *stage
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	CoreJWT = &Q.CoreJWT
	CoreRelease = &Q.CoreRelease
	CoreReleasedResource = &Q.CoreReleasedResource
	Gateway = &Q.Gateway
	McpServer = &Q.McpServer
	McpServerAppPermission = &Q.McpServerAppPermission
	OpenapiGatewayResourceVersionSpec = &Q.OpenapiGatewayResourceVersionSpec
	Stage = &Q.Stage
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                                db,
		CoreJWT:                           newCoreJWT(db, opts...),
		CoreRelease:                       newCoreRelease(db, opts...),
		CoreReleasedResource:              newCoreReleasedResource(db, opts...),
		Gateway:                           newGateway(db, opts...),
		McpServer:                         newMcpServer(db, opts...),
		McpServerAppPermission:            newMcpServerAppPermission(db, opts...),
		OpenapiGatewayResourceVersionSpec: newOpenapiGatewayResourceVersionSpec(db, opts...),
		Stage:                             newStage(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	CoreJWT                           coreJWT
	CoreRelease                       coreRelease
	CoreReleasedResource              coreReleasedResource
	Gateway                           gateway
	McpServer                         mcpServer
	McpServerAppPermission            mcpServerAppPermission
	OpenapiGatewayResourceVersionSpec openapiGatewayResourceVersionSpec
	Stage                             stage
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                                db,
		CoreJWT:                           q.CoreJWT.clone(db),
		CoreRelease:                       q.CoreRelease.clone(db),
		CoreReleasedResource:              q.CoreReleasedResource.clone(db),
		Gateway:                           q.Gateway.clone(db),
		McpServer:                         q.McpServer.clone(db),
		McpServerAppPermission:            q.McpServerAppPermission.clone(db),
		OpenapiGatewayResourceVersionSpec: q.OpenapiGatewayResourceVersionSpec.clone(db),
		Stage:                             q.Stage.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                                db,
		CoreJWT:                           q.CoreJWT.replaceDB(db),
		CoreRelease:                       q.CoreRelease.replaceDB(db),
		CoreReleasedResource:              q.CoreReleasedResource.replaceDB(db),
		Gateway:                           q.Gateway.replaceDB(db),
		McpServer:                         q.McpServer.replaceDB(db),
		McpServerAppPermission:            q.McpServerAppPermission.replaceDB(db),
		OpenapiGatewayResourceVersionSpec: q.OpenapiGatewayResourceVersionSpec.replaceDB(db),
		Stage:                             q.Stage.replaceDB(db),
	}
}

type queryCtx struct {
	CoreJWT                           ICoreJWTDo
	CoreRelease                       ICoreReleaseDo
	CoreReleasedResource              ICoreReleasedResourceDo
	Gateway                           IGatewayDo
	McpServer                         IMcpServerDo
	McpServerAppPermission            IMcpServerAppPermissionDo
	OpenapiGatewayResourceVersionSpec IOpenapiGatewayResourceVersionSpecDo
	Stage                             IStageDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		CoreJWT:                           q.CoreJWT.WithContext(ctx),
		CoreRelease:                       q.CoreRelease.WithContext(ctx),
		CoreReleasedResource:              q.CoreReleasedResource.WithContext(ctx),
		Gateway:                           q.Gateway.WithContext(ctx),
		McpServer:                         q.McpServer.WithContext(ctx),
		McpServerAppPermission:            q.McpServerAppPermission.WithContext(ctx),
		OpenapiGatewayResourceVersionSpec: q.OpenapiGatewayResourceVersionSpec.WithContext(ctx),
		Stage:                             q.Stage.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}

// Code generated by MockGen. DO NOT EDIT.
// Source: publish_event.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	dao "core/pkg/database/dao"

	gomock "github.com/golang/mock/gomock"
)

// MockPublishEventManger is a mock of PublishEventManger interface.
type MockPublishEventManger struct {
	ctrl     *gomock.Controller
	recorder *MockPublishEventMangerMockRecorder
}

// MockPublishEventMangerMockRecorder is the mock recorder for MockPublishEventManger.
type MockPublishEventMangerMockRecorder struct {
	mock *MockPublishEventManger
}

// NewMockPublishEventManger creates a new mock instance.
func NewMockPublishEventManger(ctrl *gomock.Controller) *MockPublishEventManger {
	mock := &MockPublishEventManger{ctrl: ctrl}
	mock.recorder = &MockPublishEventMangerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublishEventManger) EXPECT() *MockPublishEventMangerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPublishEventManger) Create(ctx context.Context, publishEvent dao.PublishEvent) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, publishEvent)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPublishEventMangerMockRecorder) Create(ctx, publishEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPublishEventManger)(nil).Create), ctx, publishEvent)
}

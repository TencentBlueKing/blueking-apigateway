// Code generated by MockGen. DO NOT EDIT.
// Source: gateway.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	dao "core/pkg/database/dao"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGatewayManager is a mock of GatewayManager interface.
type MockGatewayManager struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayManagerMockRecorder
}

// MockGatewayManagerMockRecorder is the mock recorder for MockGatewayManager.
type MockGatewayManagerMockRecorder struct {
	mock *MockGatewayManager
}

// NewMockGatewayManager creates a new mock instance.
func NewMockGatewayManager(ctrl *gomock.Controller) *MockGatewayManager {
	mock := &MockGatewayManager{ctrl: ctrl}
	mock.recorder = &MockGatewayManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGatewayManager) EXPECT() *MockGatewayManagerMockRecorder {
	return m.recorder
}

// GetByName mocks base method.
func (m *MockGatewayManager) GetByName(ctx context.Context, name string) (dao.Gateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, name)
	ret0, _ := ret[0].(dao.Gateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockGatewayManagerMockRecorder) GetByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockGatewayManager)(nil).GetByName), ctx, name)
}

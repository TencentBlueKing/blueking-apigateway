// Code generated by MockGen. DO NOT EDIT.
// Source: app_resource_permission.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	dao "core/pkg/database/dao"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAppResourcePermissionManager is a mock of AppResourcePermissionManager interface.
type MockAppResourcePermissionManager struct {
	ctrl     *gomock.Controller
	recorder *MockAppResourcePermissionManagerMockRecorder
}

// MockAppResourcePermissionManagerMockRecorder is the mock recorder for MockAppResourcePermissionManager.
type MockAppResourcePermissionManagerMockRecorder struct {
	mock *MockAppResourcePermissionManager
}

// NewMockAppResourcePermissionManager creates a new mock instance.
func NewMockAppResourcePermissionManager(ctrl *gomock.Controller) *MockAppResourcePermissionManager {
	mock := &MockAppResourcePermissionManager{ctrl: ctrl}
	mock.recorder = &MockAppResourcePermissionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppResourcePermissionManager) EXPECT() *MockAppResourcePermissionManagerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockAppResourcePermissionManager) Get(ctx context.Context, bkAppCode string, gatewayID, resourceID int64) (dao.AppResourcePermission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, bkAppCode, gatewayID, resourceID)
	ret0, _ := ret[0].(dao.AppResourcePermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAppResourcePermissionManagerMockRecorder) Get(ctx, bkAppCode, gatewayID, resourceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAppResourcePermissionManager)(nil).Get), ctx, bkAppCode, gatewayID, resourceID)
}

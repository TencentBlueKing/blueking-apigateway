// Code generated by MockGen. DO NOT EDIT.
// Source: release_history.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	dao "core/pkg/database/dao"

	gomock "github.com/golang/mock/gomock"
)

// MockReleaseHistoryManger is a mock of ReleaseHistoryManger interface.
type MockReleaseHistoryManger struct {
	ctrl     *gomock.Controller
	recorder *MockReleaseHistoryMangerMockRecorder
}

// MockReleaseHistoryMangerMockRecorder is the mock recorder for MockReleaseHistoryManger.
type MockReleaseHistoryMangerMockRecorder struct {
	mock *MockReleaseHistoryManger
}

// NewMockReleaseHistoryManger creates a new mock instance.
func NewMockReleaseHistoryManger(ctrl *gomock.Controller) *MockReleaseHistoryManger {
	mock := &MockReleaseHistoryManger{ctrl: ctrl}
	mock.recorder = &MockReleaseHistoryMangerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReleaseHistoryManger) EXPECT() *MockReleaseHistoryMangerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockReleaseHistoryManger) Get(ctx context.Context, publishID int64) (dao.ReleaseHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, publishID)
	ret0, _ := ret[0].(dao.ReleaseHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockReleaseHistoryMangerMockRecorder) Get(ctx, publishID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockReleaseHistoryManger)(nil).Get), ctx, publishID)
}

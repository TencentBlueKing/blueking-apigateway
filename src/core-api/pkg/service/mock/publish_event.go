// Code generated by MockGen. DO NOT EDIT.
// Source: publish_event.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	service "core/pkg/service"

	gomock "github.com/golang/mock/gomock"
)

// MockPublishEventService is a mock of PublishEventService interface.
type MockPublishEventService struct {
	ctrl     *gomock.Controller
	recorder *MockPublishEventServiceMockRecorder
}

// MockPublishEventServiceMockRecorder is the mock recorder for MockPublishEventService.
type MockPublishEventServiceMockRecorder struct {
	mock *MockPublishEventService
}

// NewMockPublishEventService creates a new mock instance.
func NewMockPublishEventService(ctrl *gomock.Controller) *MockPublishEventService {
	mock := &MockPublishEventService{ctrl: ctrl}
	mock.recorder = &MockPublishEventServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublishEventService) EXPECT() *MockPublishEventServiceMockRecorder {
	return m.recorder
}

// Report mocks base method.
func (m *MockPublishEventService) Report(ctx context.Context, event service.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Report", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Report indicates an expected call of Report.
func (mr *MockPublishEventServiceMockRecorder) Report(ctx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Report", reflect.TypeOf((*MockPublishEventService)(nil).Report), ctx, event)
}

#
# TencentBlueKing is pleased to support the open source community by making
# 蓝鲸智云 - API 网关(BlueKing - APIGateway) available.
# Copyright (C) 2025 Tencent. All rights reserved.
# Licensed under the MIT License (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
#
#     http://opensource.org/licenses/MIT
#
# Unless required by applicable law or agreed to in writing, software distributed under
# the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied. See the License for the specific language governing permissions and
# limitations under the License.
#
# We undertake not to change the open source license (MIT license) applicable
# to the current version of the project delivered to anyone in the future.
#
# Generated by Django 2.0.13 on 2022-03-07 08:01

import django.db.models.deletion
import jsonfield.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("schema", "0005_auto_20220307_1601"),
        ("core", "0018_stage_is_public"),
    ]

    operations = [
        migrations.CreateModel(
            name="BackendService",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_time", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_time", models.DateTimeField(auto_now=True, null=True)),
                ("created_by", models.CharField(blank=True, max_length=32, null=True)),
                ("updated_by", models.CharField(blank=True, max_length=32, null=True)),
                ("_config", models.TextField(db_column="config")),
                ("name", models.CharField(blank=True, max_length=256)),
                ("description", models.TextField(blank=True, default="", null=True)),
                (
                    "upstream_type",
                    models.CharField(
                        choices=[("node", "节点"), ("service_discovery", "服务发现")], default="node", max_length=64
                    ),
                ),
            ],
            options={
                "db_table": "core_backend_service",
            },
        ),
        migrations.CreateModel(
            name="MicroGateway",
            fields=[
                ("created_time", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_time", models.DateTimeField(auto_now=True, null=True)),
                ("created_by", models.CharField(blank=True, max_length=32, null=True)),
                ("updated_by", models.CharField(blank=True, max_length=32, null=True)),
                ("_config", models.TextField(db_column="config")),
                ("id", models.UUIDField(primary_key=True, serialize=False)),
                ("name", models.CharField(db_index=True, max_length=256)),
                ("description", models.TextField(blank=True, default="", null=True)),
                ("is_shared", models.BooleanField(default=False, help_text="是否共享实例")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "待安装"),
                            ("installing", "安装中"),
                            ("installed", "已安装"),
                            ("abnormal", "安装异常"),
                        ],
                        default="pending",
                        max_length=64,
                    ),
                ),
                ("status_updated_time", models.DateTimeField(blank=True, null=True)),
                ("comment", models.CharField(blank=True, default="", max_length=512)),
            ],
            options={
                "db_table": "core_micro_gateway",
            },
        ),
        migrations.CreateModel(
            name="MicroGatewayReleaseHistory",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("message", models.TextField(blank=True, default="", null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("success", "SUCCESS"),
                            ("failure", "FAILURE"),
                            ("pending", "PENDING"),
                            ("releasing", "RELEASING"),
                        ],
                        default="pending",
                        max_length=16,
                        verbose_name="发布状态",
                    ),
                ),
                ("details", jsonfield.fields.JSONField(blank=True, null=True, verbose_name="额外详情")),
            ],
            options={
                "db_table": "core_micro_gateway_release_history",
            },
        ),
        migrations.AddField(
            model_name="api",
            name="hosting_type",
            field=models.IntegerField(choices=[(0, "apigateway-ng"), (1, "微网关")], default=0),
        ),
        migrations.AddField(
            model_name="resourceversion",
            name="version",
            field=models.CharField(default="", help_text="符合 semver 规范", max_length=128),
        ),
        migrations.AlterField(
            model_name="api",
            name="_maintainers",
            field=models.CharField(db_column="maintainers", default="", max_length=1024),
        ),
        migrations.AlterField(
            model_name="api",
            name="description",
            field=models.CharField(blank=True, default="", max_length=512, null=True),
        ),
        migrations.AlterField(
            model_name="api",
            name="is_public",
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name="releasehistory",
            name="status",
            field=models.CharField(
                choices=[
                    ("success", "SUCCESS"),
                    ("failure", "FAILURE"),
                    ("pending", "PENDING"),
                    ("releasing", "RELEASING"),
                ],
                default="pending",
                max_length=16,
                verbose_name="发布状态",
            ),
        ),
        migrations.AlterField(
            model_name="resourceversion",
            name="name",
            field=models.CharField(max_length=128, unique=True, verbose_name="[Deprecated] 版本名"),
        ),
        migrations.AlterField(
            model_name="resourceversion",
            name="title",
            field=models.CharField(
                blank=True, default="", help_text="版本标题，概述", max_length=128, null=True, verbose_name="版本标题"
            ),
        ),
        migrations.AddField(
            model_name="microgatewayreleasehistory",
            name="api",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="core.API"),
        ),
        migrations.AddField(
            model_name="microgatewayreleasehistory",
            name="micro_gateway",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="core.MicroGateway"),
        ),
        migrations.AddField(
            model_name="microgatewayreleasehistory",
            name="release_history",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="core.ReleaseHistory"),
        ),
        migrations.AddField(
            model_name="microgatewayreleasehistory",
            name="stage",
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to="core.Stage"),
        ),
        migrations.AddField(
            model_name="microgateway",
            name="api",
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="core.API"),
        ),
        migrations.AddField(
            model_name="microgateway",
            name="schema",
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="schema.Schema"),
        ),
        migrations.AddField(
            model_name="backendservice",
            name="api",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="core.API"),
        ),
        migrations.AddField(
            model_name="backendservice",
            name="schema",
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="schema.Schema"),
        ),
        migrations.AddField(
            model_name="proxy",
            name="backend_service",
            field=models.ForeignKey(
                default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to="core.BackendService"
            ),
        ),
        migrations.AlterField(
            model_name="stage",
            name="status",
            field=models.IntegerField(choices=[(0, "INACTIVE"), (1, "ACTIVE")], default=0),
        ),
        migrations.AddField(
            model_name="stage",
            name="micro_gateway",
            field=models.ForeignKey(
                default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to="core.MicroGateway"
            ),
        ),
    ]

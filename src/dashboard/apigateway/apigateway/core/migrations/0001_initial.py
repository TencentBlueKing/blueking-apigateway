#
# TencentBlueKing is pleased to support the open source community by making
# 蓝鲸智云 - API 网关(BlueKing - APIGateway) available.
# Copyright (C) 2025 Tencent. All rights reserved.
# Licensed under the MIT License (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
#
#     http://opensource.org/licenses/MIT
#
# Unless required by applicable law or agreed to in writing, software distributed under
# the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied. See the License for the specific language governing permissions and
# limitations under the License.
#
# We undertake not to change the open source license (MIT license) applicable
# to the current version of the project delivered to anyone in the future.
#
# Generated by Django 2.0.13 on 2019-11-27 02:24

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("schema", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="API",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_time", models.DateTimeField(blank=True, null=True)),
                ("updated_time", models.DateTimeField(blank=True, null=True)),
                ("created_by", models.CharField(blank=True, max_length=32, null=True)),
                ("updated_by", models.CharField(blank=True, max_length=32, null=True)),
                ("name", models.CharField(max_length=64, unique=True)),
                ("description", models.CharField(blank=True, max_length=512, null=True)),
                ("_maintainers", models.CharField(db_column="maintainers", max_length=1024)),
                ("status", models.IntegerField(choices=[(0, "INACTIVE"), (1, "ACTIVE")])),
                ("is_public", models.BooleanField(default=True)),
            ],
            options={
                "verbose_name": "API",
                "verbose_name_plural": "API",
                "db_table": "core_api",
            },
        ),
        migrations.CreateModel(
            name="Context",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_time", models.DateTimeField(blank=True, null=True)),
                ("updated_time", models.DateTimeField(blank=True, null=True)),
                ("created_by", models.CharField(blank=True, max_length=32, null=True)),
                ("updated_by", models.CharField(blank=True, max_length=32, null=True)),
                ("_config", models.TextField(db_column="config")),
                (
                    "scope_type",
                    models.CharField(
                        choices=[("api", "API"), ("stage", "STAGE"), ("resource", "RESOURCE")], max_length=32
                    ),
                ),
                ("scope_id", models.IntegerField(db_index=True)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("api_auth", "API_AUTH"),
                            ("resource_auth", "RESOURCE_AUTH"),
                            ("stage_proxy_http", "STAGE_PROXY_HTTP"),
                        ],
                        max_length=32,
                    ),
                ),
                ("schema", models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="schema.Schema")),
            ],
            options={
                "verbose_name": "Context",
                "verbose_name_plural": "Context",
                "db_table": "core_context",
            },
        ),
        migrations.CreateModel(
            name="Proxy",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_time", models.DateTimeField(blank=True, null=True)),
                ("updated_time", models.DateTimeField(blank=True, null=True)),
                ("created_by", models.CharField(blank=True, max_length=32, null=True)),
                ("updated_by", models.CharField(blank=True, max_length=32, null=True)),
                ("_config", models.TextField(db_column="config")),
                ("type", models.CharField(choices=[("http", "HTTP"), ("mock", "MOCK")], max_length=20)),
            ],
            options={
                "verbose_name": "Proxy",
                "verbose_name_plural": "Proxies",
                "db_table": "core_proxy",
            },
        ),
        migrations.CreateModel(
            name="Release",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_time", models.DateTimeField(blank=True, null=True)),
                ("updated_time", models.DateTimeField(blank=True, null=True)),
                ("created_by", models.CharField(blank=True, max_length=32, null=True)),
                ("updated_by", models.CharField(blank=True, max_length=32, null=True)),
                ("comment", models.CharField(blank=True, max_length=512, null=True)),
            ],
            options={
                "verbose_name": "Release",
                "verbose_name_plural": "Release",
                "db_table": "core_release",
            },
        ),
        migrations.CreateModel(
            name="ReleaseHistory",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_by", models.CharField(blank=True, max_length=32, null=True)),
                ("updated_by", models.CharField(blank=True, max_length=32, null=True)),
                ("comment", models.CharField(blank=True, max_length=512, null=True)),
                ("created_time", models.DateTimeField(blank=True, null=True)),
                ("updated_time", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "ReleaseHistory",
                "verbose_name_plural": "ReleaseHistory",
                "db_table": "core_release_history",
            },
        ),
        migrations.CreateModel(
            name="Resource",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_time", models.DateTimeField(blank=True, null=True)),
                ("updated_time", models.DateTimeField(blank=True, null=True)),
                ("created_by", models.CharField(blank=True, max_length=32, null=True)),
                ("updated_by", models.CharField(blank=True, max_length=32, null=True)),
                ("name", models.CharField(blank=True, default="", max_length=256, null=True)),
                ("description", models.CharField(blank=True, max_length=512, null=True)),
                ("method", models.CharField(max_length=10)),
                ("path", models.CharField(max_length=2048)),
                ("proxy_id", models.IntegerField()),
                ("is_public", models.BooleanField(default=True)),
            ],
            options={
                "verbose_name": "Resource",
                "verbose_name_plural": "Resource",
                "db_table": "core_resource",
            },
        ),
        migrations.CreateModel(
            name="ResourceVersion",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_time", models.DateTimeField(blank=True, null=True)),
                ("updated_time", models.DateTimeField(blank=True, null=True)),
                ("created_by", models.CharField(blank=True, max_length=32, null=True)),
                ("updated_by", models.CharField(blank=True, max_length=32, null=True)),
                ("name", models.CharField(max_length=128, unique=True)),
                ("comment", models.CharField(blank=True, max_length=512, null=True)),
                ("_data", models.TextField(db_column="data")),
            ],
            options={
                "verbose_name": "ResourceVersion",
                "verbose_name_plural": "ResourceVersion",
                "db_table": "core_resource_version",
            },
        ),
        migrations.CreateModel(
            name="Stage",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_time", models.DateTimeField(blank=True, null=True)),
                ("updated_time", models.DateTimeField(blank=True, null=True)),
                ("created_by", models.CharField(blank=True, max_length=32, null=True)),
                ("updated_by", models.CharField(blank=True, max_length=32, null=True)),
                ("name", models.CharField(max_length=64)),
                ("description", models.CharField(blank=True, max_length=512, null=True)),
                ("_vars", models.TextField(db_column="vars")),
                ("status", models.IntegerField(choices=[(0, "INACTIVE"), (1, "ACTIVE")])),
            ],
            options={
                "verbose_name": "Stage",
                "verbose_name_plural": "Stage",
                "db_table": "core_stage",
            },
        ),
        migrations.CreateModel(
            name="StageResourceDisabled",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_time", models.DateTimeField(blank=True, null=True)),
                ("updated_time", models.DateTimeField(blank=True, null=True)),
                ("created_by", models.CharField(blank=True, max_length=32, null=True)),
                ("updated_by", models.CharField(blank=True, max_length=32, null=True)),
                ("resource", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="core.Resource")),
                ("stage", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="core.Stage")),
            ],
            options={
                "verbose_name": "StageResourceDisabled",
                "verbose_name_plural": "StageResourceDisabled",
                "db_table": "core_stage_resource_disabled",
            },
        ),
        migrations.CreateModel(
            name="JWT",
            fields=[
                ("created_time", models.DateTimeField(blank=True, null=True)),
                ("updated_time", models.DateTimeField(blank=True, null=True)),
                ("created_by", models.CharField(blank=True, max_length=32, null=True)),
                ("updated_by", models.CharField(blank=True, max_length=32, null=True)),
                (
                    "api",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to="core.API"
                    ),
                ),
                ("private_key", models.TextField()),
                ("public_key", models.TextField()),
            ],
            options={
                "verbose_name": "JWT",
                "verbose_name_plural": "JWT",
                "db_table": "core_jwt",
            },
        ),
        migrations.AddField(
            model_name="stage",
            name="api",
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="core.API"),
        ),
        migrations.AddField(
            model_name="resourceversion",
            name="api",
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="core.API"),
        ),
        migrations.AddField(
            model_name="resource",
            name="api",
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="core.API"),
        ),
        migrations.AddField(
            model_name="releasehistory",
            name="api",
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="core.API"),
        ),
        migrations.AddField(
            model_name="releasehistory",
            name="resource_version",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="core.ResourceVersion"),
        ),
        migrations.AddField(
            model_name="releasehistory",
            name="stage",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="core.Stage"),
        ),
        migrations.AddField(
            model_name="release",
            name="api",
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="core.API"),
        ),
        migrations.AddField(
            model_name="release",
            name="resource_version",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="core.ResourceVersion"),
        ),
        migrations.AddField(
            model_name="release",
            name="stage",
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to="core.Stage"),
        ),
        migrations.AddField(
            model_name="proxy",
            name="resource",
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="core.Resource"),
        ),
        migrations.AddField(
            model_name="proxy",
            name="schema",
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="schema.Schema"),
        ),
        migrations.AlterUniqueTogether(
            name="stageresourcedisabled",
            unique_together={("stage", "resource")},
        ),
        migrations.AlterUniqueTogether(
            name="stage",
            unique_together={("api", "name")},
        ),
        migrations.AlterUniqueTogether(
            name="proxy",
            unique_together={("resource", "type")},
        ),
        migrations.AlterUniqueTogether(
            name="context",
            unique_together={("scope_type", "scope_id", "type")},
        ),
    ]

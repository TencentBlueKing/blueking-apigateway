#
# TencentBlueKing is pleased to support the open source community by making
# 蓝鲸智云 - API 网关(BlueKing - APIGateway) available.
# Copyright (C) 2025 Tencent. All rights reserved.
# Licensed under the MIT License (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
#
#     http://opensource.org/licenses/MIT
#
# Unless required by applicable law or agreed to in writing, software distributed under
# the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied. See the License for the specific language governing permissions and
# limitations under the License.
#
# We undertake not to change the open source license (MIT license) applicable
# to the current version of the project delivered to anyone in the future.
#
# Generated by Django 2.0.13 on 2022-03-07 08:01

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("core", "0019_auto_20220307_1601"),
        ("schema", "0005_auto_20220307_1601"),
    ]

    operations = [
        migrations.CreateModel(
            name="Plugin",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_time", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_time", models.DateTimeField(auto_now=True, null=True)),
                ("created_by", models.CharField(blank=True, max_length=32, null=True)),
                ("updated_by", models.CharField(blank=True, max_length=32, null=True)),
                ("_config", models.TextField(db_column="config")),
                ("name", models.CharField(db_index=True, max_length=64)),
                ("description", models.TextField(blank=True, default="")),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("ip_access_control", "IP访问控制"),
                            ("rate_limit", "频率控制"),
                            ("cors", "CORS"),
                            ("circuit_breaker", "断路器"),
                        ],
                        max_length=32,
                    ),
                ),
                ("api", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="core.API")),
                (
                    "schema",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to="schema.Schema"
                    ),
                ),
            ],
            options={
                "verbose_name": "插件",
                "verbose_name_plural": "插件",
                "db_table": "plugin",
            },
        ),
        migrations.CreateModel(
            name="PluginBinding",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_time", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_time", models.DateTimeField(auto_now=True, null=True)),
                ("created_by", models.CharField(blank=True, max_length=32, null=True)),
                ("updated_by", models.CharField(blank=True, max_length=32, null=True)),
                (
                    "scope_type",
                    models.CharField(
                        choices=[("stage", "Stage"), ("resource", "Resource")], db_index=True, max_length=32
                    ),
                ),
                ("scope_id", models.IntegerField(db_index=True)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("ip_access_control", "IP访问控制"),
                            ("rate_limit", "频率控制"),
                            ("cors", "CORS"),
                            ("circuit_breaker", "断路器"),
                        ],
                        max_length=32,
                    ),
                ),
                ("api", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="core.API")),
                ("plugin", models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="plugin.Plugin")),
            ],
            options={
                "verbose_name": "插件绑定",
                "verbose_name_plural": "插件绑定",
                "db_table": "plugin_binding",
            },
        ),
        migrations.AlterUniqueTogether(
            name="pluginbinding",
            unique_together={("scope_type", "scope_id", "type")},
        ),
        migrations.AlterUniqueTogether(
            name="plugin",
            unique_together={("api", "name", "type")},
        ),
    ]

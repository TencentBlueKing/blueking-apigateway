#!/bin/bash
set -ex

while getopts ":a:" opt; do
    case ${opt} in
        a)
            esb_verified_user_exempted_apps=${OPTARG}
            ;;
    esac
done

envfile="${BK_HOME}/etc/bk_apigateway/bk_apigateway.env"

if [ -f "${envfile}" ]; then
    set -a
    source "${envfile}"
    set +a
fi

# 数据库
python manage.py migrate
# only init esb when ENABLE_MULTI_TENANT_MODE != true/True
if [ "${ENABLE_MULTI_TENANT_MODE}" != "true" ] && [ "${ENABLE_MULTI_TENANT_MODE}" != "True" ]; then
python manage.py migrate bkcore --database bkcore
fi

python manage.py loaddata -i apigateway/fixtures/*.yaml

# dashboard 相关
python manage.py sync_schema
python manage.py sync_managers_to_user

# 微网关初始化
python manage.py sync_gateway --name "${DEFAULT_MICRO_GATEWAY_API_NAME}"
python manage.py add_stage --gateway "${DEFAULT_MICRO_GATEWAY_API_NAME}" --name "${DEFAULT_MICRO_GATEWAY_STAGE_NAME}"
python manage.py add_related_app --gateway-name "${DEFAULT_MICRO_GATEWAY_API_NAME}" --app-code "${BK_APP_CODE}"
python manage.py sync_default_micro_gateway \
--gateway "${DEFAULT_MICRO_GATEWAY_API_NAME}" \
--stage "${DEFAULT_MICRO_GATEWAY_STAGE_NAME}" \
--name "${DEFAULT_MICRO_GATEWAY_NAME}" \
--secret "${DEFAULT_MICRO_GATEWAY_SECRET}" \
--http-url "${DEFAULT_MICRO_GATEWAY_HTTP_URL}"

# only init esb when ENABLE_MULTI_TENANT_MODE != true/True
if [ "${ENABLE_MULTI_TENANT_MODE}" != "true" ] && [ "${ENABLE_MULTI_TENANT_MODE}" != "True" ]; then
    # ESB 相关
    python manage.py create_esb_jwt_key
    python manage.py create_esb_gateway
    python manage.py sync_esb_jwt_key_to_gateway
    python manage.py update_esb_user_verified_unrequired_apps ${esb_verified_user_exempted_apps}
    python manage.py sync_esb_verified_user_exempted_apps_to_gateway
    python manage.py add_plugin_error_status_code_200
fi

# 蓝鲸通知中心
python manage.py register_to_bk_notice
